// простое создание коллекции с помощью метода Arrays.asList()
arrayList.addAll(Arrays.asList(new String("text1"), new String("text1"))); 
// для сортировки коллекции переопределяем метод compare()
arrayList.sort(new Comparator<String>() {
	@override
	public int compare(String stringOne, String stringTwo) {
		return stringOne.compareTo(stringTwo); 
		// если равны возращаем 0, 
		// stringOne>stringTwo возращаем 1,  
		// stringOne<stringTwo возращаем -1
	}
}

// Сортировку можно сделать только в коллекциях типа List и TreeSet, в HashSet(внутри реализован на базе HashMap) нельзя тк порядок не гарантируется
// сортировку можно сделать если реализовать у сортируемых обьектов интерфейс Comparable и
// переопределив метод compareTo(), пример:
class User implements Comparable <User> {
private final String name;
	User(String name) {
		this.name = name;
	}
	@Override
	public int compareTo(User o) {
		return this.name.compareTo(o.name);
	}
}

HashMap
1. HashMap представляет из себя массив записей (Map.Entry<K,V>)
2. Проверяется, не превысит ли порог количества элементов добавление нового. Порог (threshold) определяется как capacity * loadFactor. 
Если превышает, то капасити (т.е. массив записей) увеличивается, соответственно все хранящиеся значения заново добавляются в хэшмэп.
3. При добавлении новой записи <ключ, значение>, вычисляется хэшкод ключа.
4. По хэшкоду ключа находится номер элемента массива записей, в которой следует поместить новое значение.
5. Если в этом элементе уже располагается какая-то запись, то существует 2 варианта: либо ключ совпадает, тогда следует заменить значение,
любо совпал хэшкод (произошла коллизия), тогда элементом этого массива устанавливается новая запись, у которой есть поле, ссылающееся 
на старую запись. Таким образом, в следующий раз для просмотра записей в этом элементе необходимо будет пройти связанный список 
записей <ключ, значение>. 
---------------------------------------------------

Generic 
Принцип PECS - Producer Extends Consumer Super

Этот принцип Joshua Bloch называет PECS (Producer Extends Consumer Super), а авторы книги Java Generics and Collections (Maurice Naftalin, Philip Wadler) - Get and Put Principle. Но давайте остановимся на PECS, запомнить проще. Этот принцип гласит:

    Если метод имеет аргументы с параметризованным типом (например, Collection или Predicate), то в случае, если аргумент - производитель (producer), нужно использовать ? extends T, а если аргумент - потребитель (consumer), нужно использовать ? super T.
    Производитель и потребитель, кто это такие? Очень просто: если метод читает данные из аргумента, то этот аргумент - производитель, а если метод передаёт данные в аргумент, то аргумент является потребителем. Важно заметить, что определяя производителя или потребителя, мы рассматриваем только данные типа T.
    
    В случае, если аргумент является и потребителем, и производителем одновременно - например, если метод одновременно и читает из коллекции, и пишет в неё (плохой стиль, но всякое бывает) - тогда его нужно оставить как есть.

    С возвращаемыми значениями тоже ничего делать не нужно - никакого удобства использование wildcard-ов в этом случае пользователю не принесёт, а лишь вынудит его использовать wildcard-ы в собственном коде.

    Производителями могут быть не только коллекции. Самый очевидный пример производителя - это фабрика:

    interface Factory<T> {
    	/**
    	 * Создаёт новый экземпляр объекта заданного типа.
    	 * 
    	 * @param args Аргументы.
    	 * @return Новый объект.
    	 */
    	T create(Object... args);
    }
    
    Хорошим примером аргумента, являющегося и производителем, и потребителем, будет аргумент вот такого типа:

    interface Cloner<T> {
    	/**
    	 * Клонирует объект.
    	 *
    	 * @param obj Исходный объект.
    	 * @return Копия.
    	 */
    	T clone(T obj);
    }
    Коллекция может быть потребителем в случае, если это ouput-коллекция, в которую метод складывает результат своей работы (хотя такой стиль в Java редко используется и считается плохим тоном).
    
    Использование термина, как "вариантность". Например, что параметр типа в конструкции <T> является инвариантным, в <? extends T> — ковариантным, а в <? super T> — контравариантным.
