1. Что такое ООП?
Объектно-ориентированное программирование представляет собой способ организации кода программы, когда основными строительными блоками программы являются объекты и классы, а логика работы программы построена на их взаимодействии.  

Класс — есть ни что иное как шаблон, по которому будут создаваться объекты. 
Класс - это такая структура данных, которую может формировать сам программист. В терминах ООП, класс состоит из полей и методов. 

Объект - это конкретный экземпляр класса. 

2. Базовые концепции ООП?

Инкапсуляция — предполагает что вы можете не знать, как именно работает тот или иной объект для того чтобы пользоваться им. Т.е. инкапсуляция — это когда вы скрываете от пользователя то, как именно реализованы ваши классы, выставляя напоказ лишь интерфейс для взаимодействия с классом. 

Наследование — предполагает создание новых классов на основе уже существующих. 
Наследование — это когда один класс расширяет функциональность другого. Это значит, что он автоматически перенимает все его поля и методы, а также добавляет некоторые свои.

Полиморфизм — предполагает что по-разному реализованными объектами можно управлять используя один и тот же интерфейс независимо от того как реализованы эти объекты. 
Полиморфизм — это возможность класса выступать в программе в роли любого из своих предков, несмотря на то, что в нем может быть изменена реализация любого из методов. Изменить работу любого из методов, унаследованных от класса-предка, класс-потомок может, описав новый метод с точно таким же именем и параметрами. Это называется переопределением. При вызове такого метода для объекта класса-потомка будет выполнена новая реализация.

3. Укажите из каких элементов состоит класс.
полей, конструктора, методов

4. Что такое конструктор? Типы конструкторов?
Конструктор - это специальный метод, который вызывается при создании нового объекта. Не всегда удобно инициализировать все переменные класса при создании его экземпляра. Иногда проще, чтобы какие-то значения были бы созданы по умолчанию при создании объекта. По сути конструктор нужен для автоматической инициализации переменных.
Конструктор инициализирует объект непосредственно во время создания. 


Характеристики конструктора:
— Имя конструктора должно совпадать с именем класса (по договоренности, первая буква — заглавная, обычно имя существительное);
— Конструктор имеется в любом классе. Даже если вы его не написали, компилятор Java сам создаст конструктор по умолчанию (default constructor), который будет пустым и не делает ничего, кроме вызова конструктора суперкласса.
— Конструктор похож на метод, но не является методом, он даже не считается членом класса. Поэтому его нельзя наследовать или переопределить в подклассе;
— Конструкторы не наследуются;
— Конструкторов может быть несколько в классе. В этом случае конструкторы называют перегруженными;
— Если в классе не описан конструктор, компилятор автоматически добавляет в код конструктор без параметров;
— Конструктор не имеет возвращаемого типа, им не может быть даже тип void, если возвращается тип void, то это уже не конструктор а метод, несмотря на совпадение с именем класса.
— В конструкторе допускается оператор return, но только пустой, без всякого возвращаемого значения;
— В конструкторе допускается применение модификаторов доступа, можно задать один из модификаторов: public, protected, private или без модификатора.
— Конструктор не может иметь модификаторов abstract, final, native, static или synchronized;
— Ключевое слово this cсылается на другой конструктор в этом же классе. Если используется, то обращение должно к нему быть первой строкой конструктора;
— Ключевое слово super вызывает конструктор родительского класса. Если используется, должно обращение к нему быть первой строкой конструктора;
— Если конструктор не делает вызов конструктора super класса-предка (с аргументами или без аргументов), компилятор автоматически добавляет код вызова конструктора класса-предка без аргументов;
5. Можно ли наследовать конструктор?
Конструкторы суперкласса не наследуются подклассами.

6. Что такое перегрузка конструктора?
Конструкторы поддерживают перегрузку, как и методы.
Удобно один конструктор вызывать из другого через ключевое слово this. При выполнении конструктора this() сначала выполняется перегруженный конструктор, который соответствует списку параметров. Затем выполняются операторы, находящиеся внутри исходного конструктора, если таковые существуют. Вызов конструктора this() должен быть первым оператором в конструкторе.

7. Что такое статический метод?
Как и статические переменные, статические методы принадлежат классу, а не к экземплярам класса. Статический метод может получить доступ только к статическим переменным класса и вызывать только статические методы класса. Обычно статические методы являются утилитными (вспомогательными) методами, которые должны быть использованы другими классами без необходимости создания экземпляра. 

8. Что такое не статический метод?
В отличии от статического метода данный метод принадлежит конкретному объекту.

9. Для чего используется ключевое слово this?
this - это указатель на экземпляр класса. 
this() обращение к конструктору данного экземпляра класса
this.x обращение к переменой данного экземпляра класса
Во Внутренних классах, где с их помощью очень удобно ссылаться на внешний класс, используя форму записи Outer.this для его текущего экземпляра и Outer.super — для его родителя. 
переменной this нельзя присвоить новое значение, потому что она объявлена как final. 

10. Какой класс является базовый родительным классов для всех классов?
класс Object
Фактически все классы наследуют от класса Object. Все остальные классы, даже те, которые мы добавляем в свой проект, являются неявно производными от класса Object. Поэтому все типы и классы могут реализовать те методы, которые определены в классе Object.
 
11. Что такое наследование? Приведите примеры из реальной жизни.
Наследование — предполагает создание новых классов на основе уже существующих. 
Наследование — это когда один класс расширяет функциональность другого. Это значит, что он автоматически перенимает все его поля и методы, а также добавляет некоторые свои.
Наследование в Java является переходным, так что если Sedan (Седан) расширяет класс Car (Автомобиль), то это значит, что Седан также унаследован от класса Vehicle (ТранспортноеСредство). Таким образом Vehicle становится суперклассом как для класса Car, так и для класса Sedan.

12. Опишите процесс создания нового объекта.
Процесс создания объекта двухступенчатый: вначале объявляется переменная данного класса, а затем с помощью ключевого слова new и конструктора непосредственно создается объект, на который и будет указывать объявленная переменная:
Book b; // объявление переменной, которая еще не хранит ссылку на объект
b = new Book(); // выделение памяти под объект Book
После объявления переменной Book b; эта переменная еще не ссылается ни на какой объект и имеет значение null. Затем мы создаем непосредственно объект класса Book с помощью одного из конструкторов и ключевого слова new.

13. Как вызвать метод из родительского класса?
Если не переопределен то просто по названию метода, 
если переопределен, то super.method()
 
14. Что такое переопределение метода?

15. Можно ли переопределить статический метод?

16. Что такое виртуальная функция и используются ли они в Java?

17. Что такое перегрузка метода?

18. Можно ли изменить тип возвращаемых тип данных при перегрузке метода?

19. Что такое множественное наследование? Как его можно реализовать в Java.

20. Что такое полиморфизм? Приведите примеры из реальной жизни.

21. Что такое инкапсуляция?

22. Как реализована инкапсуляция в Java?

23. Что такое абстракция?

24. Как реализована абстракция в Java?

25. Что такое интерфейс?

26. Что такое внутренний класс? Типы внутренних классов.

27. Что такое анонимный класс.

28. Для чего используется конструктор в абстрактном классе?

29.Можно ли создать анонимный класс. если в классе нет конструктора по умолчанию?

30.Что такое композиция?

31.Что такое агрегация?

32.Какие типы исключительных ситуаций бывают?

33. Как обрабатываются исключительные ситуации?

34. Назовите основные методы класса Object?

35. Для чего нужен метод finalize()?
Предназначен этот метод для автоматического освобождения системных ресурсов, занимаемых объектом, на котором будет данный метод вызван.
Метод finalize вызывается в момент, когда сборщик мусора начинает утилизировать объект.
Исключения, брошенные в методе finalize, не обрабатываются потоком-финализатором, т.е. данный стектрейс скорее всего нельзя будет отследить.
Finalize можно использовать как последний шанс закрыть ресурс, но никогда как первая или единственная попытка. 
Есть вероятность, что этот метод не будет вызван совсем. Это может произойти в момент, когда объект уже станет доступным для сборщика мусора и программа завершит свою работу.
Лучше вместо finalize писать методы типа close в java.io и вызывать их в блоке finally. Недостатком является то, что разработкик должен помнить, что ресурс после использования нужно закрыть. На помощь тут нам пришла Java SE 7 со своими try-with-resources
Данная конструкция(try-with-resources) появилась в java 7, она позволяет использовать блок try-catch не заботясь о закрытии ресурсов, используемых в данном сегменте кода.
Ресурсы объявляются в скобках сразу после try, а компилятор уже сам неявно создаёт секцию finally в которой и происходит закрытие без участия разработчика. Конструкция является так называемым «синтаксическим сахаром» и создана для облегчения жизни программиста. Под ресурсами подразумеваются сущности, реализующие интерфейс java.lang.Autocloseable Общий вид конструкции выглядит следующим образом
try(тут объявляются ресурсы){
    ...
    ...
}catch(Exception ex){
    ...
}finally{
    ...
}

Стоит заметить, что блоки catch и явный finally выполняются уже после того, как закрываются ресурсы в неявном finnaly.
У Джошуа Блоха хорошо написано об этом методе: 
Краткая выдержка:
1. finalize() можно использовать только в двух случаях:
1.1. Проверка/подчистка ресурсов с логированием
1.2. При работе с нативным кодом, который не критичен к утечке ресурсов
2. finalize() замедляет работу GC по очистке объекта в 430 раз
3. finalize() может быть не вызван
